{#
Copyright 2024 New Vector Ltd

SPDX-License-Identifier: AGPL-3.0-only
#}

{% import "common/sub_schema_values.yaml.j2" as sub_schema_values %}
enabled: true
{{- sub_schema_values.image(registry='ghcr.io', repository='element-hq/matrix-authentication-service', tag='0.14.0') }}

## Force the authentication to happen with legacy authentication.
## This can be used to deploy Matrix Authentication Service and keeping auth on Synapse.
## Once MAS is deployed, you can run the syn2mas tool to migrate the data from Synapse to MAS.
## This should be set back to false and never switch again after the migration to MAS has been run.
preMigrationSynapseHandlesAuth: false

{{ sub_schema_values.postgresLibPQ() }}

{{ sub_schema_values.credential("Encryption secret", "encryptionSecret", initIfAbsent=True) }}
{{ sub_schema_values.credential("Synapse - MAS Shared Secret", "synapseSharedSecret", initIfAbsent=True) }}
{{ sub_schema_values.credential("Synapse - MAS OIDC Client Secret", "synapseOIDCClientSecret", initIfAbsent=True) }}
{{ sub_schema_values.credential("Synapse - MAS OIDC Client Id", "synapseOIDCClientId", initIfAbsent=True) }}


## Additional configuration to provide to Matrix Authentication Service.
## Each key under additional is an additioanal config to merge into Matrix Authentication Service config.yaml
## Full details on available configuration options can be found at https://element-hq.github.io/matrix-authentication-service/reference/configuration.html
{{- sub_schema_values.additionalConfig() }}
privateKeys:
{{ sub_schema_values.credential("RSA Private Key", "rsa", initIfAbsent=True) | indent(2) }}
{{ sub_schema_values.credential("ECDSA Prime256v1 Private Key", "ecdsaPrime256v1", initIfAbsent=True) | indent(2) }}
{{ sub_schema_values.credential("ECDSA Secp256k1 Private Key", "ecdsaSecp256k1") | indent(2) }}
{{ sub_schema_values.credential("ECDSA Secp384r1 Private Key", "ecdsaSecp384r1") | indent(2) }}

{{ sub_schema_values.ingress() }}
{{ sub_schema_values.resources(requests_memory='50Mi', requests_cpu='50m', limits_memory='350Mi') }}
{{ sub_schema_values.labels() }}
{{ sub_schema_values.serviceAccount() }}
{{ sub_schema_values.nodeSelector() }}
{{ sub_schema_values.tolerations(global=false, key='tolerations') }}
{{ sub_schema_values.topologySpreadConstraints(global=true, key= 'topologySpreadConstraints') }}
{{ sub_schema_values.podSecurityContext(user_id=10005, group_id=10005) }}
{{ sub_schema_values.containersSecurityContext(key='containersSecurityContext') }}
{{ sub_schema_values.workloadAnnotations() }}
{{ sub_schema_values.serviceMonitors(key= 'serviceMonitors') }}
{{ sub_schema_values.extraEnv() }}
